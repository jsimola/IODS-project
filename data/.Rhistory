summary(m2)
# predict() the probability of high_use
probabilities <- predict(m2, type = "response")
# add the predicted probabilities to 'chosen_data'
chosen_data <- mutate(chosen_data, probability = probabilities)
chosen_data <- mutate(chosen_data, prediction = probability > 0.5)
# 2x2 cross tabulation of predictions versus the actual values
table(high_use = chosen_data$high_use, prediction = chosen_data$prediction)
# Visualization of the actual values and the predictions
ggplot(chosen_data, aes(x=probability, y=high_useN)) + geom_scatter()
m2 <- glm(high_use ~ absences + studytime, data = chosen_data, family = "binomial") # find the model with glm()
summary(m2)
# predict() the probability of high_use
probabilities <- predict(m2, type = "response")
# add the predicted probabilities to 'chosen_data'
chosen_data <- mutate(chosen_data, probability = probabilities)
chosen_data <- mutate(chosen_data, prediction = probability > 0.5)
# 2x2 cross tabulation of predictions versus the actual values
table(high_use = chosen_data$high_use, prediction = chosen_data$prediction)
# Visualization of the actual values and the predictions
ggplot(chosen_data, aes(x=probability, y=high_useN)) + geom_point()
m2 <- glm(high_use ~ absences + studytime, data = chosen_data, family = "binomial") # find the model with glm()
summary(m2)
# predict() the probability of high_use
probabilities <- predict(m2, type = "response")
# add the predicted probabilities to 'chosen_data'
chosen_data <- mutate(chosen_data, probability = probabilities)
chosen_data <- mutate(chosen_data, prediction = probability > 0.5)
# 2x2 cross tabulation of predictions versus the actual values
table(high_use = chosen_data$high_use, prediction = chosen_data$prediction)
# Visualization of the actual values and the predictions
ggplot(chosen_data, aes(x=probability, y=high_useN, col=prediction)) + geom_point()
m2 <- glm(high_use ~ absences + studytime, data = chosen_data, family = "binomial") # find the model with glm()
summary(m2)
# predict() the probability of high_use
probabilities <- predict(m2, type = "response")
# add the predicted probabilities to 'chosen_data'
chosen_data <- mutate(chosen_data, probability = probabilities)
chosen_data <- mutate(chosen_data, prediction = probability > 0.5)
# 2x2 cross tabulation of predictions versus the actual values
table(high_use = chosen_data$high_use, prediction = chosen_data$prediction)
# Visualization of the actual values and the predictions
ggplot(chosen_data, aes(x=probability, y=high_use)) + geom_point()
# The total proportion of inaccurately classified individuals (= the training error)
Table1[1]
Table1[[1]]
Table1[[1][1]]
Table1[1][1]
Table1[1][2]
Table1[2]
Table1[2][1]
Table1[2][2]
Table1[[2]]
Table1[[2]][1]
Table1[[2]][2]
Table1[[2]][2] * 382
Table1[[2]][2]/100 * 382
256/382
rm(Table1)
rm(Table2)
m2 <- glm(high_use ~ absences + studytime, data = chosen_data, family = "binomial") # find the model with glm()
summary(m2)
# predict() the probability of high_use
probabilities <- predict(m2, type = "response")
# add the predicted probabilities to 'chosen_data'
chosen_data <- mutate(chosen_data, probability = probabilities)
chosen_data <- mutate(chosen_data, prediction = probability > 0.5)
# 2x2 cross tabulation of predictions versus the actual values
t <- table(high_use = chosen_data$high_use, prediction = chosen_data$prediction)
# Visualization of the actual values and the predictions
#ggplot(chosen_data, aes(x=probability, y=high_use)) + geom_point()
# The total proportion of inaccurately classified individuals (= the training error)
t[1]
t[[1]]
m2 <- glm(high_use ~ absences + studytime, data = chosen_data, family = "binomial") # find the model with glm()
summary(m2)
# predict() the probability of high_use
probabilities <- predict(m2, type = "response")
# add the predicted probabilities to 'chosen_data'
chosen_data <- mutate(chosen_data, probability = probabilities)
chosen_data <- mutate(chosen_data, prediction = probability > 0.5)
# 2x2 cross tabulation of predictions versus the actual values
t <- table(high_use = chosen_data$high_use, prediction = chosen_data$prediction)
t
# Visualization of the actual values and the predictions
#ggplot(chosen_data, aes(x=probability, y=high_use)) + geom_point()
# The total proportion of inaccurately classified individuals (= the training error)
t[2]
(t[1] + t[2]) - t[2]
(t[1] + t[2]) - t[1]
t[1][2]
t[2][1]
t[[2]][[2]]
t[2][2]
t[2,2]
t[2,1]
t[1,2]
err = t[2,1] + t[1,2]/ (t[1,1] + t[1,2])
NumErr = t[2,1] + t[1,2]
Tot = t[1,1] + t[1,2]
PropErr = (NumErr / Tot) / 100
m2 <- glm(high_use ~ absences + studytime, data = chosen_data, family = "binomial") # find the model with glm()
summary(m2)
# predict() the probability of high_use
probabilities <- predict(m2, type = "response")
# add the predicted probabilities to 'chosen_data'
chosen_data <- mutate(chosen_data, probability = probabilities)
chosen_data <- mutate(chosen_data, prediction = probability > 0.5)
# 2x2 cross tabulation of predictions versus the actual values
t <- table(high_use = chosen_data$high_use, prediction = chosen_data$prediction)
t
# Visualization of the actual values and the predictions
#ggplot(chosen_data, aes(x=probability, y=high_use)) + geom_point()
# The total proportion of inaccurately classified individuals (= the training error)
NumErr = t[2,1] + t[1,2]
Tot = t[1,1] + t[1,2]
PropErr = (NumErr / Tot) / 100
256 + 96
m2 <- glm(high_use ~ absences + studytime, data = chosen_data, family = "binomial") # find the model with glm()
summary(m2)
# predict() the probability of high_use
probabilities <- predict(m2, type = "response")
# add the predicted probabilities to 'chosen_data'
chosen_data <- mutate(chosen_data, probability = probabilities)
chosen_data <- mutate(chosen_data, prediction = probability > 0.5)
# 2x2 cross tabulation of predictions versus the actual values
t <- table(high_use = chosen_data$high_use, prediction = chosen_data$prediction)
t
# Visualization of the actual values and the predictions
#ggplot(chosen_data, aes(x=probability, y=high_use)) + geom_point()
# The total proportion of inaccurately classified individuals (= the training error)
NumErr = t[2,1] + t[1,2]
Tot = 382 # num obs
PropErr = (NumErr / Tot) / 100
96+12
256+12+96+18
m2 <- glm(high_use ~ absences + studytime, data = chosen_data, family = "binomial") # find the model with glm()
summary(m2)
# predict() the probability of high_use
probabilities <- predict(m2, type = "response")
# add the predicted probabilities to 'chosen_data'
chosen_data <- mutate(chosen_data, probability = probabilities)
chosen_data <- mutate(chosen_data, prediction = probability > 0.5)
# 2x2 cross tabulation of predictions versus the actual values
t <- table(high_use = chosen_data$high_use, prediction = chosen_data$prediction)
t
# The total proportion of inaccurately classified individuals (= the training error)
NumErr = t[2,1] + t[1,2]
Tot = 382 # num obs
PropErr = (NumErr / Tot) / 100
PropErr
round(PropErr)
round(PropErr, 2)
round(PropErr, 5)
round(PropErr, 3)
m2 <- glm(high_use ~ absences + studytime, data = chosen_data, family = "binomial") # find the model with glm()
summary(m2)
# predict() the probability of high_use
probabilities <- predict(m2, type = "response")
# add the predicted probabilities to 'chosen_data'
chosen_data <- mutate(chosen_data, probability = probabilities)
chosen_data <- mutate(chosen_data, prediction = probability > 0.5)
# 2x2 cross tabulation of predictions versus the actual values
t <- table(high_use = chosen_data$high_use, prediction = chosen_data$prediction)
t
# The total proportion of inaccurately classified individuals (= the training error)
NumErr = t[2,1] + t[1,2]
Tot = 382 # num obs
PropErr = (NumErr / Tot) * 100
(96 + 12)/382
m2 <- glm(high_use ~ absences + studytime, data = chosen_data, family = "binomial") # find the model with glm()
summary(m2)
# predict() the probability of high_use
probabilities <- predict(m2, type = "response")
# add the predicted probabilities to 'chosen_data'
chosen_data <- mutate(chosen_data, probability = probabilities)
chosen_data <- mutate(chosen_data, prediction = probability > 0.5)
# 2x2 cross tabulation of predictions versus the actual values
t <- table(high_use = chosen_data$high_use, prediction = chosen_data$prediction)
t
# The total proportion of inaccurately classified individuals (= the training error)
NumErr = t[2,1] + t[1,2]
Tot = 382 # num obs
PropErr = round(NumErr / Tot, 3)
m2 <- glm(high_use ~ absences + studytime, data = chosen_data, family = "binomial") # find the model with glm()
summary(m2)
# predict() the probability of high_use
probabilities <- predict(m2, type = "response")
# add the predicted probabilities to 'chosen_data'
chosen_data <- mutate(chosen_data, probability = probabilities)
chosen_data <- mutate(chosen_data, prediction = probability > 0.5)
# 2x2 cross tabulation of predictions versus the actual values
t <- table(high_use = chosen_data$high_use, prediction = chosen_data$prediction)
t
# The total proportion of inaccurately classified individuals (= the training error)
NumErr = t[2,1] + t[1,2]
Tot = 382 # num obs
PropErr = round(NumErr / Tot, 2)
m2 <- glm(high_use ~ absences + studytime, data = chosen_data, family = "binomial") # find the model with glm()
summary(m2)
# predict() the probability of high_use
probabilities <- predict(m2, type = "response")
# add the predicted probabilities to 'chosen_data'
chosen_data <- mutate(chosen_data, probability = probabilities)
chosen_data <- mutate(chosen_data, prediction = probability > 0.5)
# 2x2 cross tabulation of predictions versus the actual values
t <- table(high_use = chosen_data$high_use, prediction = chosen_data$prediction)
t
# The total proportion of inaccurately classified individuals (= the training error)
NumErr = t[2,1] + t[1,2]
Tot = 382 # num obs
PropErr = round(NumErr / Tot, 2)
Accuracy = 100 - (PropErr*100)
variable.names(alc)
summary(alc)
head(alc)
glimple(alc)
glimpse(alc)
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
gather(chosen_data) %>% ggplot(aes(x=high_use, y=value)) + facet_wrap("key", scales = "free") + geom_boxplot()
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_boxplot()
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
gather(chosen_data) %>% ggplot(chosen_data, aes(x=high_use, y = value)) + facet_wrap("key", scales = "free") + geom_boxplot()
?gather()
gather(chosen_data, key = "high_use") %>% ggplot(chosen_data, aes(x=high_use, y = value)) + facet_wrap("key", scales = "free") + geom_boxplot()
df <- gather(chosen_data, high_use, Value, G3:studytime)
boxplot(Value ~ Group, df)
df <- gather(chosen_data, high_useN, Value, G3:studytime)
boxplot(Value ~ high_useN, df)
df <- gather(chosen_data, high_use, Value, G3:studytime)
boxplot(Value ~ high_use, df)
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
# box plots
ggplot(chosen_data, aes(x=high_use, y = G3)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = absences)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = health)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = studytime)) + geom_boxplot()
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_boxplot() # bar plots
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
gather(chosen_data) %>% ggplot(aes(y=value)) + facet_wrap("key", scales = "free") + geom_boxplot() # bar plots
# box plots
ggplot(chosen_data, aes(x=high_use, y = G3)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = absences)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = health)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = studytime)) + geom_boxplot()
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
gather(chosen_data) %>% ggplot(aes(x=high_use, y=value)) + facet_wrap("key", scales = "free") + geom_boxplot() # bar plots
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
gather(chosen_data) %>% ggplot(aes(x=chosen_data$high_use, y=value)) + facet_wrap("key", scales = "free") + geom_boxplot() # bar plots
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
gather(chosen_data) %>% ggplot(aes(x=high_useN, y=value)) + facet_wrap("key", scales = "free") + geom_boxplot() # bar plots
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
gather(chosen_data) %>% ggplot(aes(y=value)) + facet_wrap("key", scales = "free") + geom_boxplot() # bar plots
# box plots
ggplot(chosen_data, aes(x=high_use, y = G3)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = absences)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = health)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = studytime)) + geom_boxplot()
gather(chosen_data, key = "high_use") %>% ggplot(aes(x=key, y=value)) + facet_wrap("key", scales = "free") + geom_boxplot() # bar plots
test <- gather(chosen_data, key = "high_use")
gather(chosen_data) %>% glimpse
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
#chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
test <- gather(chosen_data, key = "high_use")
#%>% ggplot(aes(x=key, y=value)) + facet_wrap("key", scales = "free") + geom_boxplot() # bar plots
# box plots
ggplot(chosen_data, aes(x=high_use, y = G3)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = absences)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = health)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = studytime)) + geom_boxplot()
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
#chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
gather(chosen_data) %>% ggplot(aes(x=key, y=value)) + facet_wrap("key", scales = "free") + geom_boxplot() # bar plots
# box plots
ggplot(chosen_data, aes(x=high_use, y = G3)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = absences)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = health)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = studytime)) + geom_boxplot()
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
#chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
gather(chosen_data) %>% ggplot(aes(x=value, y=value)) + facet_wrap("key", scales = "free") + geom_boxplot() # bar plots
# box plots
ggplot(chosen_data, aes(x=high_use, y = G3)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = absences)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = health)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = studytime)) + geom_boxplot()
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
#chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
gather(chosen_data) %>% ggplot(aes(group=high_use, y=value)) + facet_wrap("key", scales = "free") + geom_boxplot() # bar plots
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
#chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
gather(chosen_data) %>% ggplot(aes(group=value, y=value)) + facet_wrap("key", scales = "free") + geom_boxplot() # bar plots
# box plots
ggplot(chosen_data, aes(x=high_use, y = G3)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = absences)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = health)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = studytime)) + geom_boxplot()
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
#chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
gather(chosen_data) %>% ggplot(aes(group=key, y=value)) + facet_wrap("key", scales = "free") + geom_boxplot() # bar plots
# box plots
ggplot(chosen_data, aes(x=high_use, y = G3)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = absences)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = health)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = studytime)) + geom_boxplot()
chosen_data %>% gather(-high_use) %>% ggplot(aes(group=high_use, y=value)) + facet_wrap("key", scales = "free") + geom_boxplot()
chosen_data %>% gather(-high_use) %>% glimpse
chosen_data %>% gather(-high_use, key = "high_use") %>% glimpse
gather(chosen_data, -high_use, key = "high_use") %>% glimpse
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
#chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
# box plots
ggplot(chosen_data, aes(x=high_use, y = G3)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = absences)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = health)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = studytime)) + geom_boxplot()
m <- glm(high_use ~ G3 + absences + health + studytime, data = chosen_data, family = "binomial")  # find the model with glm()
summary(m) # summary of the model
OddsRatios <- coef(m) %>% exp
ConfInt <- confint(m) %>% exp
cbind(OddsRatios, ConfInt)
rm(list = ls())  # clear workspac
alc <- read.csv("~/Documents/GitHub/IODS-project/data/alc.csv") # my own data wrangling
variable.names(alc)
rm(list = ls())  # clear workspac
alc <- read.csv("~/Documents/GitHub/IODS-project/data/alc.csv") # my own data wrangling
variable.names(alc)
glimpse(alc)
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
#chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
# box plots
ggplot(chosen_data, aes(x=high_use, y = G3)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = absences)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = health)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = studytime)) + geom_boxplot()
m <- glm(high_use ~ G3 + absences + health + studytime, data = chosen_data, family = "binomial")  # find the model with glm()
summary(m) # summary of the model
OddsRatios <- coef(m) %>% exp
ConfInt <- confint(m) %>% exp
cbind(OddsRatios, ConfInt)
m2 <- glm(high_use ~ absences + studytime, data = chosen_data, family = "binomial") # find the model with glm()
summary(m2)
# predict() the probability of high_use
probabilities <- predict(m2, type = "response")
# add the predicted probabilities to 'chosen_data'
chosen_data <- mutate(chosen_data, probability = probabilities)
chosen_data <- mutate(chosen_data, prediction = probability > 0.5)
# 2x2 cross tabulation of predictions versus the actual values
t <- table(high_use = chosen_data$high_use, prediction = chosen_data$prediction)
t
# The total proportion of inaccurately classified individuals (= the training error)
NumErr = t[2,1] + t[1,2]
Tot = 382 # num obs
PropErr = round(NumErr / Tot, 2)
Accuracy = 100 - (PropErr*100)
getwd()
rm(raw_data)
setwd("~/Documents/R/IODS-course/peer-review/week3")
rm(list = ls())
setwd("~/Documents/GitHub/IODS-project/data")
# Read both student-mat.csv and student-por.csv
student_mat <- read.csv("~/Documents/GitHub/IODS-project/data/student-mat.csv", sep = ";", header = TRUE)
student_por <- read.csv("~/Documents/GitHub/IODS-project/data/student-por.csv", sep = ";", header = TRUE)
dim(student_mat)
str(student_mat)
head(student_mat)
dim(student_por)
str(student_por)
head(student_por)
colnames(student_mat)
colnames(student_por)
library(dplyr)
join_by<- c("school", "sex", "age", "address", "famsize", "Pstatus","Medu", "Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
join_by
mat_por<- inner_join(student_mat,student_por, by=join_by,suffix=c(".mat", ".por"))
colnames(mat_por)
dim(mat_por)
str(mat_por)
head(mat_por)
glimpse(mat_por)
alc<-select(mat_por, one_of(join_by)) # datafram with the joined columns
str(alc)
colnames(alc)
not_joined <- colnames(student_mat)[!colnames(student_mat) %in% join_by]
not_joined
for(column_name in not_joined) {
# select two columns from 'math_por' with the same original name
two_columns <- select(mat_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
dim(alc)
glimpse(alc)
alc$Dalc # 1-5
alc$Walc
alc <- mutate(alc, alc_use = (Dalc+Walc)/2)
alc <- mutate(alc, high_use = alc_use >2)
glimpse(alc)
dim(alc)
str(alc)
1+1+5+5+3+2
