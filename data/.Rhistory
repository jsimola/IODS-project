# display age distribution as histogram
p2 <- ggplot(learning2014, aes(Age))
p2 + geom_histogram(binwidth = 5)
# show attitudes as histogram
p3 <- ggplot(learning2014, aes(Attitude))
p3 + geom_histogram(binwidth = 2)
# define the visualization type (points)
#p2 <- p1 + geom_point()
# draw the plot
#p2
# add a regression line
#p3 <- p2 + geom_smooth(method = "lm")
# add a main title and draw the plot
#p4 <- p3 + ggtitle("Exam points by attitude")
#p4
# show gender distributions as bar graph
p1 <- ggplot(learning2014, aes(gender))
p1 + geom_bar()
# display age distribution as histogram
p2 <- ggplot(learning2014, aes(Age))
p2 + geom_histogram(binwidth = 5)
# show attitudes as histogram
p3 <- ggplot(learning2014, aes(Attitude))
p3 + geom_histogram(binwidth = 2)
p4 <- ggplot(learning2014, aes(x = deep, y = Points))
p4 + geom_point()
p4 + ggtitle("Relationship between exam points and deep learning")
# draw the plot
#p2
# add a regression line
#p3 <- p2 + geom_smooth(method = "lm")
# add a main title and draw the plot
#p4 <- p3 + ggtitle("Exam points by attitude")
#p4
# show gender distributions as bar graph
p1 <- ggplot(learning2014, aes(gender))
p1 + geom_bar()
# display age distribution as histogram
p2 <- ggplot(learning2014, aes(Age))
p2 + geom_histogram(binwidth = 5)
# show attitudes as histogram
p3 <- ggplot(learning2014, aes(Attitude))
p3 + geom_histogram(binwidth = 2)
p4 <- ggplot(learning2014, aes(x = deep, y = Points))
p4 <- geom_point()
p4 + ggtitle("Relationship between exam points and deep learning")
# show gender distributions as bar graph
p1 <- ggplot(learning2014, aes(gender))
p1 + geom_bar()
# display age distribution as histogram
p2 <- ggplot(learning2014, aes(Age))
p2 + geom_histogram(binwidth = 5)
# show attitudes as histogram
p3 <- ggplot(learning2014, aes(Attitude))
p3 + geom_histogram(binwidth = 2)
p4 <- ggplot(learning2014, aes(x = deep, y = Points))
p4 + geom_point() + ggtitle("Relationship between exam points and deep learning")
# draw the plot
#p2
# add a regression line
#p3 <- p2 + geom_smooth(method = "lm")
# add a main title and draw the plot
#p4 <- p3 + ggtitle("Exam points by attitude")
#p4
# show gender distributions as bar graph
p1 <- ggplot(learning2014, aes(gender))
p1 + geom_bar()
# display age distribution as histogram
p2 <- ggplot(learning2014, aes(Age))
p2 + geom_histogram(binwidth = 5)
# show attitudes as histogram
p3 <- ggplot(learning2014, aes(Attitude))
p3 + geom_histogram(binwidth = 2)
p4 <- ggplot(learning2014, aes(x = deep, y = Points))
p4 + geom_point()
+ ggtitle("Relationship between exam points and deep learning")
# show gender distributions as bar graph
p1 <- ggplot(learning2014, aes(gender))
p1 + geom_bar()
# display age distribution as histogram
p2 <- ggplot(learning2014, aes(Age))
p2 + geom_histogram(binwidth = 5)
# show attitudes as histogram
p3 <- ggplot(learning2014, aes(Attitude))
p3 + geom_histogram(binwidth = 2)
p4 <- ggplot(learning2014, aes(x = deep, y = Points))
p4 + geom_point() + ggtitle("Relationship between exam points and deep learning") + geom_smooth(method = "lm")
# draw the plot
#p2
# add a regression line
#p3 <- p2 + geom_smooth(method = "lm")
# add a main title and draw the plot
#p4 <- p3 + ggtitle("Exam points by attitude")
#p4
# show gender distributions as bar graph
p1 <- ggplot(learning2014, aes(gender))
p1 + geom_bar()
# display variable distributions as histogram
p2 <- ggplot(learning2014, aes(Age))
p2 + geom_histogram(binwidth = 5)
p3 <- ggplot(learning2014, aes(Attitude))
p3 + geom_histogram(binwidth = 2)
p4 <- ggplot(learning2014, aes(deep))
p4 + geom_histogram(binwidth = 2)
p5 <- ggplot(learning2014, aes(stra))
p5 + geom_histogram(binwidth = 2)
p6 <- ggplot(learning2014, aes(surf))
p6 + geom_histogram(binwidth = 2)
p7 <- ggplot(learning2014, aes(Points))
p7 + geom_histogram(binwidth = 2)
# show relationships between variables
p8 <- ggplot(learning2014, aes(x = deep, y = Points))
p8 + geom_point() + ggtitle("Relationship between exam points and deep learning") + geom_smooth(method = "lm")
# draw the plot
#p2
# add a regression line
#p3 <- p2 + geom_smooth(method = "lm")
# add a main title and draw the plot
#p4 <- p3 + ggtitle("Exam points by attitude")
#p4
# show gender distributions as bar graph
p1 <- ggplot(learning2014, aes(gender))
p1 + geom_bar()
# display variable distributions as histogram
p2 <- ggplot(learning2014, aes(Age))
p2 + geom_histogram(binwidth = 5)
p3 <- ggplot(learning2014, aes(Attitude))
p3 + geom_histogram(binwidth = 2)
p4 <- ggplot(learning2014, aes(deep))
p4 + geom_histogram(binwidth = 0.5)
p5 <- ggplot(learning2014, aes(stra))
p5 + geom_histogram(binwidth = 0.5)
p6 <- ggplot(learning2014, aes(surf))
p6 + geom_histogram(binwidth = 0.5)
p7 <- ggplot(learning2014, aes(Points))
p7 + geom_histogram(binwidth = 2)
# show relationships between variables
p8 <- ggplot(learning2014, aes(x = deep, y = Points))
p8 + geom_point() + ggtitle("Relationship between exam points and deep learning") + geom_smooth(method = "lm")
# draw the plot
#p2
# add a regression line
#p3 <- p2 + geom_smooth(method = "lm")
# add a main title and draw the plot
#p4 <- p3 + ggtitle("Exam points by attitude")
#p4
# show gender distributions as bar graph
p1 <- ggplot(learning2014, aes(gender))
p1 + geom_bar()
# display variable distributions as histogram
p2 <- ggplot(learning2014, aes(Age))
p2 + geom_histogram(binwidth = 5)
p3 <- ggplot(learning2014, aes(Attitude))
p3 + geom_histogram(binwidth = 2)
p4 <- ggplot(learning2014, aes(deep))
p4 + geom_histogram(binwidth = 0.5)
p5 <- ggplot(learning2014, aes(stra))
p5 + geom_histogram(binwidth = 0.5)
p6 <- ggplot(learning2014, aes(surf))
p6 + geom_histogram(binwidth = 0.5)
p7 <- ggplot(learning2014, aes(Points))
p7 + geom_histogram(binwidth = 2)
# show relationships between variables
p8 <- ggplot(learning2014, aes(x = Attitude, y = Points))
p8 + geom_point() + ggtitle("Relationship between exam points and deep learning") + geom_smooth(method = "lm")
p9 <- ggplot(learning2014, aes(x = deep, y = Points))
p9 + geom_point() + ggtitle("Relationship between exam points and deep learning") + geom_smooth(method = "lm")
p10 <- ggplot(learning2014, aes(x = stra, y = Points))
p10 + geom_point() + ggtitle("Relationship between exam points and deep learning") + geom_smooth(method = "lm")
p11 <- ggplot(learning2014, aes(x = surf, y = Points))
p11 + geom_point() + ggtitle("Relationship between exam points and deep learning") + geom_smooth(method = "lm")
# draw the plot
#p2
# add a regression line
#p3 <- p2 + geom_smooth(method = "lm")
# add a main title and draw the plot
#p4 <- p3 + ggtitle("Exam points by attitude")
#p4
# show gender distributions as bar graph
p1 <- ggplot(learning2014, aes(gender))
p1 + geom_bar()
# display variable distributions as histogram
p2 <- ggplot(learning2014, aes(Age))
p2 + geom_histogram(binwidth = 5)
p3 <- ggplot(learning2014, aes(Attitude))
p3 + geom_histogram(binwidth = 2)
p4 <- ggplot(learning2014, aes(deep))
p4 + geom_histogram(binwidth = 0.5)
p5 <- ggplot(learning2014, aes(stra))
p5 + geom_histogram(binwidth = 0.5)
p6 <- ggplot(learning2014, aes(surf))
p6 + geom_histogram(binwidth = 0.5)
p7 <- ggplot(learning2014, aes(Points))
p7 + geom_histogram(binwidth = 2)
# show relationships between variables
p8 <- ggplot(learning2014, aes(x = Attitude, y = Points))
p8 + geom_point() + ggtitle("Relationship between exam points and deep learning") + geom_smooth(method = "lm")
p9 <- ggplot(learning2014, aes(x = deep, y = Points))
p9 + geom_point() + ggtitle("Relationship between exam points and deep learning") + geom_smooth(method = "lm")
p10 <- ggplot(learning2014, aes(x = stra, y = Points))
p10 + geom_point() + ggtitle("Relationship between exam points and strategic learning") + geom_smooth(method = "lm")
p11 <- ggplot(learning2014, aes(x = surf, y = Points))
p11 + geom_point() + ggtitle("Relationship between exam points and surface learning") + geom_smooth(method = "lm")
# draw the plot
#p2
# add a regression line
#p3 <- p2 + geom_smooth(method = "lm")
# add a main title and draw the plot
#p4 <- p3 + ggtitle("Exam points by attitude")
#p4
# show gender distributions as bar graph
p1 <- ggplot(learning2014, aes(gender))
p1 + geom_bar()
# display variable distributions as histogram
p2 <- ggplot(learning2014, aes(Age))
p2 + geom_histogram(binwidth = 5)
p3 <- ggplot(learning2014, aes(Attitude))
p3 + geom_histogram(binwidth = 2)
p4 <- ggplot(learning2014, aes(deep))
p4 + geom_histogram(binwidth = 0.5)
p5 <- ggplot(learning2014, aes(stra))
p5 + geom_histogram(binwidth = 0.5)
p6 <- ggplot(learning2014, aes(surf))
p6 + geom_histogram(binwidth = 0.5)
p7 <- ggplot(learning2014, aes(Points))
p7 + geom_histogram(binwidth = 2)
# show relationships between variables
p8 <- ggplot(learning2014, aes(x = Attitude, y = Points))
p8 + geom_point() + ggtitle("Relationship between exam points and deep learning") + geom_smooth(method = "lm")
p9 <- ggplot(learning2014, aes(x = deep, y = Points))
p9 + geom_point() + ggtitle("Relationship between exam points and deep learning") + geom_smooth(method = "lm")
p10 <- ggplot(learning2014, aes(x = stra, y = Points))
p10 + geom_point() + ggtitle("Relationship between exam points and strategic learning") + geom_smooth(method = "lm")
p11 <- ggplot(learning2014, aes(x = surf, y = Points))
p11 + geom_point() + ggtitle("Relationship between exam points and surface learning") + geom_smooth(method = "lm")
p12 <- ggplot(learning2014, aes(x = age, y = Points))
p12 + geom_point() + ggtitle("Relationship between age and exam points") + geom_smooth(method = "lm")
# show gender distributions as bar graph
p1 <- ggplot(learning2014, aes(gender))
p1 + geom_bar()
# display variable distributions as histogram
p2 <- ggplot(learning2014, aes(Age))
p2 + geom_histogram(binwidth = 5)
p3 <- ggplot(learning2014, aes(Attitude))
p3 + geom_histogram(binwidth = 2)
p4 <- ggplot(learning2014, aes(deep))
p4 + geom_histogram(binwidth = 0.5)
p5 <- ggplot(learning2014, aes(stra))
p5 + geom_histogram(binwidth = 0.5)
p6 <- ggplot(learning2014, aes(surf))
p6 + geom_histogram(binwidth = 0.5)
p7 <- ggplot(learning2014, aes(Points))
p7 + geom_histogram(binwidth = 2)
# show relationships between variables
p8 <- ggplot(learning2014, aes(x = Attitude, y = Points))
p8 + geom_point() + ggtitle("Relationship between exam points and deep learning") + geom_smooth(method = "lm")
p9 <- ggplot(learning2014, aes(x = deep, y = Points))
p9 + geom_point() + ggtitle("Relationship between exam points and deep learning") + geom_smooth(method = "lm")
p10 <- ggplot(learning2014, aes(x = stra, y = Points))
p10 + geom_point() + ggtitle("Relationship between exam points and strategic learning") + geom_smooth(method = "lm")
p11 <- ggplot(learning2014, aes(x = surf, y = Points))
p11 + geom_point() + ggtitle("Relationship between exam points and surface learning") + geom_smooth(method = "lm")
p12 <- ggplot(learning2014, aes(x = Age, y = Points))
p12 + geom_point() + ggtitle("Relationship between age and exam points") + geom_smooth(method = "lm")
p13 <- ggplot(learning2014, aes(x = Age, y = Attitude))
p13 + geom_point() + ggtitle("Relationship between age and attitudes") + geom_smooth(method = "lm")
p14 <- ggplot(learning2014, aes(x = gender, y = Points))
p14 + geom_boxplot() + ggtitle("exam points by gender")
# draw the plot
#p2
# add a regression line
#p3 <- p2 + geom_smooth(method = "lm")
# add a main title and draw the plot
#p4 <- p3 + ggtitle("Exam points by attitude")
#p4
# show gender distributions as bar graph
p1 <- ggplot(learning2014, aes(gender))
p1 + geom_bar()
# display variable distributions as histogram
p2 <- ggplot(learning2014, aes(Age))
p2 + geom_histogram(binwidth = 5)
p3 <- ggplot(learning2014, aes(Attitude))
p3 + geom_histogram(binwidth = 2)
p4 <- ggplot(learning2014, aes(deep))
p4 + geom_histogram(binwidth = 0.5)
p5 <- ggplot(learning2014, aes(stra))
p5 + geom_histogram(binwidth = 0.5)
p6 <- ggplot(learning2014, aes(surf))
p6 + geom_histogram(binwidth = 0.5)
p7 <- ggplot(learning2014, aes(Points))
p7 + geom_histogram(binwidth = 2)
# show relationships between variables
p8 <- ggplot(learning2014, aes(x = Attitude, y = Points, col=gender))
p8 + geom_point() + ggtitle("Relationship between exam points and deep learning") + geom_smooth(method = "lm")
p9 <- ggplot(learning2014, aes(x = deep, y = Points, col=gender))
p9 + geom_point() + ggtitle("Relationship between exam points and deep learning") + geom_smooth(method = "lm")
p10 <- ggplot(learning2014, aes(x = stra, y = Points, col=gender))
p10 + geom_point() + ggtitle("Relationship between exam points and strategic learning") + geom_smooth(method = "lm")
p11 <- ggplot(learning2014, aes(x = surf, y = Points, col=gender))
p11 + geom_point() + ggtitle("Relationship between exam points and surface learning") + geom_smooth(method = "lm")
p12 <- ggplot(learning2014, aes(x = Age, y = Points, col=gender))
p12 + geom_point() + ggtitle("Relationship between age and exam points") + geom_smooth(method = "lm")
p13 <- ggplot(learning2014, aes(x = Age, y = Attitude, col=gender))
p13 + geom_point() + ggtitle("Relationship between age and attitudes") + geom_smooth(method = "lm")
#p14 <- ggplot(learning2014, aes(x = gender, y = Points, col=gender))
#p14 + geom_boxplot() + ggtitle("exam points by gender")
install.packages("GGally")
library(GGally)
pairs(learning2014[-1])
library(GGally)
pairs(learning2014[-1])
p <- ggpairs(learning2014, mapping = aes(col=gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
# draw the plot
p
library(GGally)
pairs(learning2014[-1], col = learning2014$gender)
p <- ggpairs(learning2014, mapping = aes(col=gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
# draw the plot
p
summarise(learning2014, group_by(gender))
Gender <- as.factor(learning2014$gender)
summarise(learning2014, group_by(Gender))
rm(Gender)
summarise(learning2014)
learning2014 %>%
group_by(gender) %>%
summarise(mean = mean(disp), n = n())
library(dplyr)
learning2014 %>%
group_by(gender) %>%
summarise(mean = mean(disp), n = n())
library(dplyr)
learning2014 %>%
group_by(gender) %>%
summarise(mean = mean(Attitude), n = n())
summary(learning2014)
summary(learning2014)
#library(dplyr)
#learning2014 %>%
#  group_by(gender) %>%
#  summarise(mean = mean(Attitude), n = n())
my_model <- lm(Points ~ 1, data = learning2014) # fit a linear model
my_model <- lm(Points ~ 1, data = learning2014) # fit a linear model
my_model
my_model <- lm(Points ~ deep, stra, surf, data = learning2014) # fit a linear model
my_model
my_model <- lm(Points ~ deep, stra, surf, data = learning2014) # fit a linear model
summary(my_model)
my_model <- lm(Points ~ deep stra surf, data = learning2014) # fit a linear model
rm(list = ls()) # clear workspace first
learning2014 <- read.csv("~/Documents/GitHub/IODS-project/learning2014.csv") # my own data wrangling
# read.table("~/Documents/GitHub/IODS-project/data/learning2014.txt", sep = ",") # Kimmo's data
# fit a linear model
my_model <- lm(Points ~ deep + stra + surf, data = learning2014) # how to use three explanatory vars
summary(my_model)
# fit a linear model
my_model1 <- lm(Points ~ deep + stra + surf, data = learning2014) # how to use three explanatory vars
summary(my_model1)
my_model2 <- lm(Points ~ stra + surf, data = learning2014) # how to use three explanatory vars
summary(my_model2)
# fit a linear model
my_model1 <- lm(Points ~ deep + stra + surf, data = learning2014) # how to use three explanatory vars
summary(my_model1)
my_model2 <- lm(Points ~ stra + surf, data = learning2014)
summary(my_model2)
my_model3 <- lm(Points ~ surf, data = learning2014)
summary(my_model3)
# fit a linear model
my_model1 <- lm(Points ~ deep + stra + surf, data = learning2014) # how to use three explanatory vars
summary(my_model1)
my_model2 <- lm(Points ~ stra + surf, data = learning2014)
summary(my_model2)
my_model3 <- lm(Points ~ surf, data = learning2014)
summary(my_model3)
plot(my_model1)
# fit a linear model
my_model1 <- lm(Points ~ deep + stra + surf, data = learning2014) # how to use three explanatory vars
summary(my_model1)
my_model2 <- lm(Points ~ stra + surf, data = learning2014)
summary(my_model2)
my_model3 <- lm(Points ~ surf, data = learning2014)
summary(my_model3)
plot(my_model1)
# fit a linear model
my_model1 <- lm(Points ~ attitude + stra + surf, data = learning2014) # how to use three explanatory vars
# fit a linear model
my_model1 <- lm(Points ~ Attitude + stra + surf, data = learning2014) # how to use three explanatory vars
summary(my_model1)
my_model2 <- lm(Points ~ stra + surf, data = learning2014)
summary(my_model2)
my_model3 <- lm(Points ~ surf, data = learning2014)
summary(my_model3)
# fit a linear model
my_model1 <- lm(Points ~ Attitude + stra + surf, data = learning2014) # how to use three explanatory vars
summary(my_model1)
my_model2 <- lm(Points ~ Attitude, data = learning2014)
summary(my_model2)
plot(my_model2)
source(create_alc.R)
source(create_alc.R)
?source
source("create_alc.R")
# Jaana Simola
# 13.11.2018
# Data wrangling - 3rd week
# Data obtained from Student Performance Data Set (https://archive.ics.uci.edu/ml/machine-learning-databases/00320/)
# clear workspace first
rm(list = ls())
setwd("~/Documents/GitHub/IODS-project/data")
# Read both student-mat.csv and student-por.csv
student_mat <- read.csv("~/Documents/GitHub/IODS-project/data/student-mat.csv", sep = ";", header = TRUE)
student_por <- read.csv("~/Documents/GitHub/IODS-project/data/student-por.csv", sep = ";", header = TRUE)
# Explore the structure and dimensions of the data
dim(student_mat) # 395 observations, 33 vars
dim(student_por) # 649 observations, 33 vars
# access the dplyr library
library(dplyr)
# Join the two data sets using the variables
join_by = c("school", "sex", "age", "address", "famsize", "Pstatus", "Medu", "Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
# Keep only the students present in both data sets.
mat_por <- inner_join(student_mat, student_por, by = join_by)
# Explore the structure and dimensions of the joined data
dim(mat_por) # 382 observations, 53 vars
# Combine the 'duplicated' answers in the joined data
# ----------------------------------------------------
# create a new data frame with only the joined columns
joined_data <- select(mat_por, one_of(join_by))
duplicated_columns <- colnames(student_mat)[!colnames(student_mat) %in% join_by]
for(column_name in duplicated_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(mat_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
joined_data[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
joined_data[column_name] <- first_column
}
}
duplicated_columns
# Jaana Simola
# 13.11.2018
# Data wrangling - 3rd week
# Data obtained from Student Performance Data Set (https://archive.ics.uci.edu/ml/machine-learning-databases/00320/)
# clear workspace first
rm(list = ls())
setwd("~/Documents/GitHub/IODS-project/data")
# Read both student-mat.csv and student-por.csv
student_mat <- read.csv("~/Documents/GitHub/IODS-project/data/student-mat.csv", sep = ";", header = TRUE)
student_por <- read.csv("~/Documents/GitHub/IODS-project/data/student-por.csv", sep = ";", header = TRUE)
# Explore the structure and dimensions of the data
dim(student_mat) # 395 observations, 33 vars
dim(student_por) # 649 observations, 33 vars
# access the dplyr library
library(dplyr)
# Join the two data sets using the variables
join_by = c("school", "sex", "age", "address", "famsize", "Pstatus", "Medu", "Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
# Keep only the students present in both data sets.
mat_por <- inner_join(student_mat, student_por, by = join_by)
# Explore the structure and dimensions of the joined data
dim(mat_por) # 382 observations, 53 vars
# Combine the 'duplicated' answers in the joined data
# ----------------------------------------------------
# create a new data frame with only the joined columns
joined_data <- select(mat_por, one_of(join_by))
duplicated_columns <- colnames(student_mat)[!colnames(student_mat) %in% join_by]
str(joined_data)
str(mat_por)
for(column_name in duplicated_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(mat_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
joined_data[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
joined_data[column_name] <- first_column
}
}
str(joined_data)
dim(joined_data)
?mutate
joined_data$alc_use <- mutate(alc, alc_use = (Dalc + Walc) / 2)
joined_data$alc_use <- mutate(alc_use = (Dalc + Walc) / 2)
joined_data$alc_use <- mutate(alc_use = (joined_data$Dalc + joined_data$Walc) / 2)
joined_data$alc_use <- joined_data$Dalc + joined_data$Walc) / 2
joined_data$alc_use <- (joined_data$Dalc + joined_data$Walc) / 2
joined_data <- mutate(joined_data, high_use = alc_use > 2)
glimpse(joined_data)
write.csv("alc.csv")
write.csv(joined_data, file="alc.csv")
rm(list = ls())
acl <- read.csv("~/Documents/GitHub/IODS-project/data/alc.csv") # my own data wrangling
str(alc)
acl <- read.csv("~/Documents/GitHub/IODS-project/data/alc.csv", sep = ";", header = TRUE) # my own data wrangling
acl <- read.csv("~/Documents/GitHub/IODS-project/data/alc.csv") # my own data wrangling
write.csv(joined_data, file="alc.csv", row.names = FALSE) # write joined data to file
acl <- read.csv("~/Documents/GitHub/IODS-project/data/alc.csv", row.names = FALSE) # my own data wrangling
source("create_alc.R")
rm(list = ls())  # clear workspac
alc <- read.csv("~/Documents/GitHub/IODS-project/data/alc.csv") # my own data wrangling
rm(list = ls())  # clear workspac
alc <- read.csv("~/Documents/GitHub/IODS-project/data/alc.csv") # my own data wrangling
print(alc)
