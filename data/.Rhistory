# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
#chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
gather(chosen_data) %>% ggplot(aes(group=high_use, y=value)) + facet_wrap("key", scales = "free") + geom_boxplot() # bar plots
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
#chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
gather(chosen_data) %>% ggplot(aes(group=value, y=value)) + facet_wrap("key", scales = "free") + geom_boxplot() # bar plots
# box plots
ggplot(chosen_data, aes(x=high_use, y = G3)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = absences)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = health)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = studytime)) + geom_boxplot()
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
#chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
gather(chosen_data) %>% ggplot(aes(group=key, y=value)) + facet_wrap("key", scales = "free") + geom_boxplot() # bar plots
# box plots
ggplot(chosen_data, aes(x=high_use, y = G3)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = absences)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = health)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = studytime)) + geom_boxplot()
chosen_data %>% gather(-high_use) %>% ggplot(aes(group=high_use, y=value)) + facet_wrap("key", scales = "free") + geom_boxplot()
chosen_data %>% gather(-high_use) %>% glimpse
chosen_data %>% gather(-high_use, key = "high_use") %>% glimpse
gather(chosen_data, -high_use, key = "high_use") %>% glimpse
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
#chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
# box plots
ggplot(chosen_data, aes(x=high_use, y = G3)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = absences)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = health)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = studytime)) + geom_boxplot()
m <- glm(high_use ~ G3 + absences + health + studytime, data = chosen_data, family = "binomial")  # find the model with glm()
summary(m) # summary of the model
OddsRatios <- coef(m) %>% exp
ConfInt <- confint(m) %>% exp
cbind(OddsRatios, ConfInt)
rm(list = ls())  # clear workspac
alc <- read.csv("~/Documents/GitHub/IODS-project/data/alc.csv") # my own data wrangling
variable.names(alc)
rm(list = ls())  # clear workspac
alc <- read.csv("~/Documents/GitHub/IODS-project/data/alc.csv") # my own data wrangling
variable.names(alc)
glimpse(alc)
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
chosen_vars <- c("high_use","G3","absences","health","studytime") # choose relevant vars
chosen_data <- select(alc, one_of(chosen_vars))
#chosen_data$high_useN <- as.numeric(chosen_data$high_use)
gather(chosen_data) %>% glimpse
gather(chosen_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
# box plots
ggplot(chosen_data, aes(x=high_use, y = G3)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = absences)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = health)) + geom_boxplot()
ggplot(chosen_data, aes(x=high_use, y = studytime)) + geom_boxplot()
m <- glm(high_use ~ G3 + absences + health + studytime, data = chosen_data, family = "binomial")  # find the model with glm()
summary(m) # summary of the model
OddsRatios <- coef(m) %>% exp
ConfInt <- confint(m) %>% exp
cbind(OddsRatios, ConfInt)
m2 <- glm(high_use ~ absences + studytime, data = chosen_data, family = "binomial") # find the model with glm()
summary(m2)
# predict() the probability of high_use
probabilities <- predict(m2, type = "response")
# add the predicted probabilities to 'chosen_data'
chosen_data <- mutate(chosen_data, probability = probabilities)
chosen_data <- mutate(chosen_data, prediction = probability > 0.5)
# 2x2 cross tabulation of predictions versus the actual values
t <- table(high_use = chosen_data$high_use, prediction = chosen_data$prediction)
t
# The total proportion of inaccurately classified individuals (= the training error)
NumErr = t[2,1] + t[1,2]
Tot = 382 # num obs
PropErr = round(NumErr / Tot, 2)
Accuracy = 100 - (PropErr*100)
library(MASS)
data("Boston")
str(Boston)
rm(raw_data)
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
gather(Boston) %>% glimpse
library(tidyr); library(dplyr); library(ggplot2)
gather(Boston) %>% glimpse
#gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
gather(Boston) %>% glimpse
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() # bar plots
gather(Boston) %>% glimpse
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_histogram() # bar plots
gather(Boston) %>% glimpse
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_histogram() # bar plots
summary(Boston)
summary(Boston)
cor_matrix<-cor(Boston) %>% round(cor_matrix)
library(tidyr); library(dplyr); library(ggplot2); library(tidyverse) # load libraries
install.packages("tidyverse")
library(tidyr); library(dplyr); library(ggplot2); library(tidyverse) # load libraries
cor_matrix<-cor(Boston) %>% round(cor_matrix)
cor(Boston)
cor_matrix <-cor(Boston) %>% round(cor_matrix)
library(tidyverse)
cor_matrix <-cor(Boston) %>% round(cor_matrix)
library(tidyverse)
cor_matrix <-cor(Boston)
cor_matrix
library(tidyverse)
cor_matrix <-cor(Boston)
round(cor_matrix)
cor_matrix
library(tidyverse)
cor_matrix <-cor(Boston)
round(cor_matrix, 3)
cor_matrix
library(tidyverse)
cor_matrix <-cor(Boston)
round(cor_matrix, 2)
cor_matrix
library(tidyverse)
cor_matrix <-cor(Boston)
round(cor_matrix, 2)
library(tidyverse)
cor_matrix <-cor(Boston)
cor_matrix <-round(cor_matrix, 2)
corrplot(cor_matrix, method = "number")
install.packages("corrplot")
library(tidyverse)
cor_matrix <-cor(Boston)
cor_matrix <-round(cor_matrix, 2)
corrplot(cor_matrix, method = "number")
library(tidyverse)
cor_matrix <-cor(Boston)
cor_matrix <-round(cor_matrix, 2)
corrplot(cor_matrix, method = "circle")
rm(raw_data)
rm(list = ls())  # clear workspace
library(MASS)
data("Boston")
str(Boston)
library(tidyr); library(dplyr); library(ggplot2) # load libraries
gather(Boston) %>% glimpse
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_histogram() # bar plots
summary(Boston)
library(tidyverse)
cor_matrix <-cor(Boston)
cor_matrix <-round(cor_matrix, 2)
corrplot(cor_matrix, method = "circle")
install.packages("corrplot")
library(tidyverse)
cor_matrix <-cor(Boston)
cor_matrix <-round(cor_matrix, 2)
corrplot(cor_matrix, method = "circle")
library(tidyverse)
library(corrplot)
cor_matrix <-cor(Boston)
cor_matrix <-round(cor_matrix, 2)
corrplot(cor_matrix, method = "circle")
library(tidyverse)
library(corrplot)
cor_matrix <-cor(Boston)
cor_matrix <-round(cor_matrix, 2)
corrplot(cor_matrix, method = "number")
library(tidyr); library(dplyr); library(ggplot2); library(tidyverse); library(corrplot) # load libraries
cor_matrix <-cor(Boston)
cor_matrix <-round(cor_matrix, 2)
corrplot(cor_matrix, method = "color")
cor_matrix <-cor(Boston)
cor_matrix <-round(cor_matrix, 2)
cor_matrix
corrplot(cor_matrix, method = "color")
cor_matrix <-cor(Boston)
cor_matrix <-round(cor_matrix, 2)
corrplot(cor_matrix, method = "color")
cor_matrix <-cor(Boston)
cor_matrix <-round(cor_matrix, 2)
cor_matrix
corrplot(cor_matrix, method = "color")
cor_matrix <-cor(Boston)
cor_matrix <-round(cor_matrix, 2)
cor_matrix(cor_matrix > 0.5)
cor_matrix <- mutate(cor_matrix, strong_cor = cor_matrix > 0.5)
cor_matrix <-cor(Boston)
cor_matrix <-round(cor_matrix, 2)
cor_matrix
corrplot(cor_matrix, method = "color")
rm(raw_data)
rm(list = ls())  # clear workspace
library(MASS)
data("Boston")
str(Boston)
library(tidyr); library(dplyr); library(ggplot2); library(tidyverse); library(corrplot) # load libraries
gather(Boston) %>% glimpse
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_histogram() # bar plots
summary(Boston)
cor_matrix <-cor(Boston)
cor_matrix <-round(cor_matrix, 2)
cor_matrix
corrplot(cor_matrix, method = "color")
cor_matrix <-cor(Boston)
cor_matrix <-round(cor_matrix, digits=2)
cor_matrix
corrplot(cor_matrix, method = "color")
boston_scaled <- scale(Boston)
summary(boston_scaled)
# create a quantile vector of crim
bins <- quantile(boston_scaled$crim)
# create a quantile vector of crim
Crim <- boston_scaled$crim
# create a quantile vector of crim
#Crim <- boston_scaled$crim
bins <- quantile(boston_scaled["crim"])
boston_scaled["crim"]
boston_scaled
boston_scaled <- as.data.frame(boston_scaled)
# create a quantile vector of crim
#Crim <- boston_scaled$crim
bins <- quantile(boston_scaled$crim)
# create a categorical variable 'crime'
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
# look at the table of the new factor crime
table(crime)
# remove original crim from the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
n <- nrow(boston_scaled) # number of rows
# choose randomly 80% of the rows to create the train set
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
# create test set
test <- boston_scaled[-ind,]
ind
rm(list = ls())  # clear workspace
library(MASS)
data("Boston")
str(Boston)
library(tidyr); library(dplyr); library(ggplot2); library(tidyverse); library(corrplot) # load libraries
gather(Boston) %>% glimpse
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_histogram() # bar plots
summary(Boston)
cor_matrix <-cor(Boston)
cor_matrix <-round(cor_matrix, digits=2)
cor_matrix
corrplot(cor_matrix, method = "color")
boston_scaled <- scale(Boston)
summary(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
# create a categorical variable 'crime' and print the table
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
table(crime)
# remove original crim from the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
n <- nrow(boston_scaled) # number of rows
# choose randomly 80% of the rows to create the train set
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
# create test set
test <- boston_scaled[-ind,]
lda.fit <- lda(crime  ~., data = train) # crime rate is the target variable and all the other variables are predictors
lda.fit <- lda(train$crime  ~., data = train) # crime rate is the target variable and all the other variables are predictors
dim(crime)
crime
boston_scaled <- as.data.frame(boston_scaled)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
# create a categorical variable 'crime' and print the table
boston_scaled$crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
boston_scaled <- as.data.frame(boston_scaled)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
# create a categorical variable 'crime' and print the table
boston_scaled_crime = cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
boston_scaled <- as.data.frame(boston_scaled)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
# create a categorical variable 'crime' and print the table
boston_scaled$crime = cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
boston_scaled <- as.data.frame(boston_scaled)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
# create a categorical variable 'crime' and print the table
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
boston_scaled <- as.data.frame(boston_scaled)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
# create a categorical variable 'crime' and print the table
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
rm(crime)
boston_scaled <- as.data.frame(boston_scaled)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
# create a categorical variable 'crime' and print the table
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
rm(list = ls())  # clear workspace
library(MASS)
data("Boston")
str(Boston)
gather(Boston) %>% glimpse
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_histogram() # bar plots
summary(Boston)
cor_matrix <-cor(Boston)
cor_matrix <-round(cor_matrix, digits=2)
cor_matrix
corrplot(cor_matrix, method = "color")
boston_scaled <- scale(Boston)
summary(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
# create a categorical variable 'crime' and print the table
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
table(crime)
cbind(boston_scaled, crime)
# remove original crim from the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
cbind(boston_scaled, crime)
boston_scaled <- as.data.frame(boston_scaled)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
# create a categorical variable 'crime' and print the table
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
rm(list = ls())  # clear workspace
library(MASS)
data("Boston")
str(Boston)
boston_scaled <- scale(Boston)
summary(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
# create a categorical variable 'crime' and print the table
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
table(crime)
boston_scaled <- cbind(boston_scaled, crime)
# remove original crim from the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
n <- nrow(boston_scaled) # number of rows
# choose randomly 80% of the rows to create the train set
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
# create test set
test <- boston_scaled[-ind,]
lda.fit <- lda(train$crime  ~., data = train) # crime rate is the target variable and all the other variables are predictors
lda.fit <- lda(train$crime  ~., data = train) # crime rate is the target variable and all the other variables are predictors
lda.fit
lda.fit <- lda(crime  ~., data = train) # crime rate is the target variable and all the other variables are predictors
lda.fit # print the solution
classes <- as.numeric(train$crime) # target classes as numeric
plot(lda.fit, dimen = 2, col = classes, pch = classes) # plot the lda results
crimeTest <- test$crime # save the crime categories from the test set
test <- select(test, -crime) # remove crime from the test dataset.
crimeTest <- test$crime # save the crime categories from the test set
test <- select(test, -crime) # remove crime from the test dataset
rm(list = ls())  # clear workspace
library(MASS)
data("Boston")
str(Boston)
boston_scaled <- scale(Boston)
summary(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
bins <- quantile(boston_scaled$crim) # create a quantile vector of crim and print it
# create a categorical variable 'crime'
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
table(crime) # print the table
boston_scaled <- cbind(boston_scaled, crime) # bind crime to boston_scaled
boston_scaled <- dplyr::select(boston_scaled, -crim) # remove original crim from the dataset
n <- nrow(boston_scaled) # number of rows
ind <- sample(n,  size = n * 0.8) # choose randomly 80% of the rows
train <- boston_scaled[ind,] # create the train set
test <- boston_scaled[-ind,] # create the test set
lda.fit <- lda(crime  ~., data = train) # crime rate is the target variable and all the other variables are predictors
lda.fit # print the solution
classes <- as.numeric(train$crime) # target classes as numeric
plot(lda.fit, dimen = 2, col = classes, pch = classes) # plot the lda results
crimeTest <- test$crime # save the crime categories from the test set
test <- select(test, -crime) # remove crime from the test dataset
lda.pred <- predict(lda.fit, newdata = test) # predict classes with test data
table(correct = correct_classes, predicted = lda.pred$class)
correct_classes <- as.numeric(train$crime)
table(correct = correct_classes, predicted = lda.pred$class)
table(correct = classes, predicted = lda.pred$class)
lda$pred
lda.pred$class
classes
predicted_classes <- as.numberic(lda.pred$class)
predicted_classes <- as.numeric(lda.pred$class)
table(correct = classes, predicted = predcted_classes)
#correct_classes <- as.numeric(test$class)
table(correct = test, predicted = predcted_classes)
#correct_classes <- as.numeric(test$class)
table(correct = test, predicted = lda.pred$class)
lda.pred$class
rm(list = ls())  # clear workspace
library(MASS)
data("Boston")
str(Boston)
boston_scaled <- scale(Boston)
summary(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
bins <- quantile(boston_scaled$crim) # create a quantile vector of crim and print it
# create a categorical variable 'crime'
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
table(crime) # print the table
boston_scaled <- cbind(boston_scaled, crime) # bind crime to boston_scaled
boston_scaled <- dplyr::select(boston_scaled, -crim) # remove original crim from the dataset
n <- nrow(boston_scaled) # number of rows
ind <- sample(n,  size = n * 0.8) # choose randomly 80% of the rows
train <- boston_scaled[ind,] # create the train set
test <- boston_scaled[-ind,] # create the test set
lda.fit <- lda(crime  ~., data = train) # crime rate is the target variable and all the other variables are predictors
lda.fit # print the solution
classes <- as.numeric(train$crime) # target classes as numeric
plot(lda.fit, dimen = 2, col = classes, pch = classes) # plot the lda results
correct_classes <- test$crime # save the crime categories from the test set
#correct_classes <- as.numeric(test$crime) # test classes as numeric
test <- select(test, -crime) # remove crime from the test dataset
lda.pred <- predict(lda.fit, newdata = test) # predict classes with test data
table(correct = correct_classes, predicted = lda.pred$class)
?sample
rm(list = ls())  # clear workspace
library(MASS)
data("Boston")
str(Boston)
library(tidyr); library(dplyr); library(ggplot2); library(tidyverse); library(corrplot) # load libraries
library(MASS)
data('Boston')
boston_scaled <- scale(Boston)
boston_scaled <- as.data.frame(boston_scaled)
# Perform k-means on the original Boston data with some reasonable number of clusters (> 2)
km_4 <-kmeans(boston_scaled, centers = 4) # k-means clustering
clusters <- as.numeric(km_4$cluster)
lda.fit4 <- lda(clusters  ~., data = boston_scaled) # perform LDA using the clusters
lda.fit4
# the function to draw lda biplot arrows
my_scale = 3 # unable to draw the arrows - i'm not sure what myscale does -tested with different values without any effect
lda.arrows <- function(x, myscale = my_scale, arrow_heads = 0.1, color = "black", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
plot(lda.fit4, dimen = 3, col = clusters, pch = clusters)
lda.arrows(lda.fit4, myscale = my_scale)
rm(list=ls())
?read.table
test <- read.table(https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/BPRS.txt)
test <- read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/BPRS.txt")
rm(test)
BPRS <- read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/BPRS.txt")
RATS <- read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/rats.txt")
setwd("~/Documents/GitHub/IODS-project/data")
getwd()
source("meet_and_repeat.R")
names(BPRS)
names(RATS)
BPRS <- read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/BPRS.txt", header = TRUE, sep = " ")
RATS <- read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/rats.txt", header = TRUE, sep = "\t")
# Check variable names
names(BPRS)
names(RATS)
str(BPRS)
str(RATS)
summary(BPRS)
summary(RATS)
head(BPRS)
head(RATS)
library(dplyr)
library(tidyr)
BPRS$treatment <- factor(BPRS$treatment)
BPRS$subject <- factor(BPRS$subject)
RATS$ID <- factor(RATS$ID)
RATS$Group <- factor(RATS$Group)
BPRSL <-  BPRS %>% gather(key = weeks, value = bprs, -treatment, -subject)
RATSL <- RATS %>% gather(key = Time, value = rats, - ID, -Group)
BPRSL <-  BPRSL %>% mutate(week = as.integer(substr(weeks,5,5)))
rm(RATSL)
RATSL <- RATS %>% gather(key = times, value = rats, - ID, -Group)
RATSL <- RATSL %>% mutate(Time = as.integer(substr(times,3,4)))
glimpse(RATSL)
tail(RATSL)
head(BPRSL)
head(RATSL)
tail(BPRSL)
tail(RATSL)
write.csv(BPRSL, file="BPRSL.csv")
write.csv(RATSL, file="RATSL.csv")
rm(RATSL, BPRSL)
# Test that everything works
read.csv(file="RATSL.csv")
getwd
getwd()
BPRSL <- read.csv(file="BPRSL.csv")
RATSL <- read.csv(file="RATSL.csv")
