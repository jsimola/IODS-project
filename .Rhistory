false_alarm_rate = fa/(cr + fa) ) -> summary_data
t.test(summary_data$hit_rate~summary_data$group, mu=0, alt="two.sided", conf=0.95, var.equal=FALSE, paired=FALSE)
t.test(summary_data$false_alarm_rate~summary_data$group, mu=0, alt="two.sided", conf=0.95, var.equal=FALSE, paired=FALSE)
summary_data %>%
group_by(part_nb,group) %>%
summarise(hit_rate_mean = mean(hit_rate,na.rm = TRUE)) %>%
ggplot(aes(x=group, y=hit_rate_mean)) +
geom_boxplot() +
theme_classic()
library(extrafont) # trying out this to fix the problem with ggplot
font_import()
ls
ls()
rm(list = ls())
.rs.restartR()
#load libraries
library(tidyverse)
library(extrafont) # trying out this to fix the problem with ggplot
font_import()
# We will use the read_csv() function from the tidyverse.
# It reads the data directly into a tibble.
# Depending on the data format; other options include read_csv2() or read_delim()
#set your working directory your root project folder
#TIP: you can use th RStudio command Session/Set Working Directory/ To Source File Location or the setwd() R command
setwd("~/Documents/PROJECTS/Gonogo/MEG/behavioral/R_analysis")
raw_data<-read_csv("data/gonogo_MEG_FB.csv", col_names = FALSE)
raw_data
# Use the names() command to assign
names(raw_data)<-c("trial_num", "onset_time", "event_type", "RT", "condition", "group", "part_nb", "fname")
glimpse(raw_data)
raw_data$group<- as.factor(raw_data$group)
raw_data$part_nb<- as.numeric(raw_data$part_nb)
glimpse(raw_data)
raw_data
# Recode event_type to descriptive values
# event_type = 1 : Go_stimulus
# event_type = 2 : NoGo_stimulus
raw_data %>%
mutate(event_code = if_else(event_type == 1, "go","nogo")) -> raw_data
raw_data
raw_data %>%
mutate(response_code = case_when(
event_type == 1 & !is.na(RT) ~ "hit",
event_type == 1 & is.na(RT) ~ "miss",
event_type == 2 & is.na(RT) ~ "cr",
event_type == 2 & !is.na(RT) ~ "fa",
TRUE                      ~  "NaN"
)) -> raw_data
# recode response types
# counter = 1;
#
# for (i in raw_data$event_type) {
#
#   if(i == 1 & !is.na(raw_data$RT[counter])) {
#     raw_data$response_code[counter] <- 1 # "hit"
#   } else if(i == 1 & is.na(raw_data$RT[counter])) {
#     raw_data$response_code[counter] <- 2 # "miss"
#   } else if(i == 2 & is.na(raw_data$RT[counter])) {
#     raw_data$response_code[counter] <- 3 #"cr"
#   } else if(i == 2 & !is.na(raw_data$RT[counter])) {
#     raw_data$response_code[counter] <- 4 #"fa"
#   }
#   counter = counter + 1;
# }
raw_data
raw_data %>%
group_by(part_nb,group) %>%
count(response_code) %>%
mutate(n = ifelse(is.na(n), 0, n))  %>% # replace NAs when there were no trials in a condition
spread(key= response_code, value =n) %>%
mutate(miss = ifelse(is.na(miss), 0, miss), # replace NAs when there were no misses by 0
hit_rate = hit / (hit + miss),
false_alarm_rate = fa/(cr + fa) ) -> summary_data
t.test(summary_data$hit_rate~summary_data$group, mu=0, alt="two.sided", conf=0.95, var.equal=FALSE, paired=FALSE)
t.test(summary_data$false_alarm_rate~summary_data$group, mu=0, alt="two.sided", conf=0.95, var.equal=FALSE, paired=FALSE)
summary_data %>%
group_by(part_nb,group) %>%
summarise(hit_rate_mean = mean(hit_rate,na.rm = TRUE)) %>%
ggplot(aes(x=group, y=hit_rate_mean)) +
geom_boxplot() +
theme_classic()
ls /Library/Fonts\ Disabled
ls /Library/Fonts Disabled
ls /Library/Fonts/ Disabled
summary_data %>%
group_by(part_nb,group) %>%
summarise(hit_rate_mean = mean(hit_rate,na.rm = TRUE)) %>%
ggplot(aes(x=group, y=hit_rate_mean)) +
geom_boxplot() +
theme(text=element_text(family="Garamond", size=14))
#load libraries
library(tidyverse)
# We will use the read_csv() function from the tidyverse.
# It reads the data directly into a tibble.
# Depending on the data format; other options include read_csv2() or read_delim()
#set your working directory your root project folder
#TIP: you can use th RStudio command Session/Set Working Directory/ To Source File Location or the setwd() R command
setwd("~/Documents/PROJECTS/Gonogo/MEG/behavioral/R_analysis")
raw_data<-read_csv("data/gonogo_MEG_FB.csv", col_names = FALSE)
raw_data
# Use the names() command to assign
names(raw_data)<-c("trial_num", "onset_time", "event_type", "RT", "condition", "group", "part_nb", "fname")
glimpse(raw_data)
raw_data$group<- as.factor(raw_data$group)
raw_data$part_nb<- as.numeric(raw_data$part_nb)
glimpse(raw_data)
raw_data
# Recode event_type to descriptive values
# event_type = 1 : Go_stimulus
# event_type = 2 : NoGo_stimulus
raw_data %>%
mutate(event_code = if_else(event_type == 1, "go","nogo")) -> raw_data
raw_data
raw_data %>%
mutate(response_code = case_when(
event_type == 1 & !is.na(RT) ~ "hit",
event_type == 1 & is.na(RT) ~ "miss",
event_type == 2 & is.na(RT) ~ "cr",
event_type == 2 & !is.na(RT) ~ "fa",
TRUE                      ~  "NaN"
)) -> raw_data
# recode response types
# counter = 1;
#
# for (i in raw_data$event_type) {
#
#   if(i == 1 & !is.na(raw_data$RT[counter])) {
#     raw_data$response_code[counter] <- 1 # "hit"
#   } else if(i == 1 & is.na(raw_data$RT[counter])) {
#     raw_data$response_code[counter] <- 2 # "miss"
#   } else if(i == 2 & is.na(raw_data$RT[counter])) {
#     raw_data$response_code[counter] <- 3 #"cr"
#   } else if(i == 2 & !is.na(raw_data$RT[counter])) {
#     raw_data$response_code[counter] <- 4 #"fa"
#   }
#   counter = counter + 1;
# }
raw_data
raw_data %>%
group_by(part_nb,group) %>%
count(response_code) %>%
mutate(n = ifelse(is.na(n), 0, n))  %>% # replace NAs when there were no trials in a condition
spread(key= response_code, value =n) %>%
mutate(miss = ifelse(is.na(miss), 0, miss), # replace NAs when there were no misses by 0
hit_rate = hit / (hit + miss),
false_alarm_rate = fa/(cr + fa) ) -> summary_data
t.test(summary_data$hit_rate~summary_data$group, mu=0, alt="two.sided", conf=0.95, var.equal=FALSE, paired=FALSE)
t.test(summary_data$false_alarm_rate~summary_data$group, mu=0, alt="two.sided", conf=0.95, var.equal=FALSE, paired=FALSE)
summary_data %>%
group_by(part_nb,group) %>%
summarise(hit_rate_mean = mean(hit_rate,na.rm = TRUE)) %>%
ggplot(aes(x=group, y=hit_rate_mean)) +
geom_boxplot() +
#theme(text=element_text(family="Garamond", size=14))
theme_classic()
summary_data %>%
group_by(part_nb,group) %>%
summarise(false_alarm_rate_mean = mean(false_alarm_rate,na.rm = TRUE)) %>%
ggplot(aes(x=group, y=false_alarm_rate_mean)) +
geom_boxplot() +
theme_classic()
raw_data %>%
group_by(part_nb,group,response_code) %>%
filter(response_code == "hit") %>%
summarise(RT_mean_hit = mean(RT,na.rm = TRUE)) -> tmp_data
full_join(summary_data,tmp_data, by = c("part_nb", "group")) -> summary_data
rm(tmp_data)
summary_data <- subset(summary_data, select = -c(response_code) )
raw_data %>%
group_by(part_nb,group,response_code) %>%
filter(response_code == "fa") %>%
summarise(RT_mean_fa = mean(RT,na.rm = TRUE)) -> tmp_data
full_join(summary_data,tmp_data, by = c("part_nb", "group")) -> summary_data
rm(tmp_data)
summary_data <- subset(summary_data, select = -c(response_code) )
raw_data %>%
group_by(part_nb,group,response_code) %>%
filter(response_code == "hit") %>%
summarise(RT_sd_hit = sd(RT,na.rm = TRUE)) -> tmp_data
full_join(summary_data,tmp_data, by = c("part_nb", "group")) -> summary_data
rm(tmp_data)
summary_data <- subset(summary_data, select = -c(response_code) )
raw_data %>%
group_by(part_nb,group,response_code) %>%
filter(response_code == "fa") %>%
summarise(RT_sd_fa = sd(RT,na.rm = TRUE)) -> tmp_data
full_join(summary_data,tmp_data, by = c("part_nb", "group")) -> summary_data
rm(tmp_data)
summary_data <- subset(summary_data, select = -c(response_code) )
t.test(summary_data$RT_mean_hit~summary_data$group, mu=0, alt="two.sided", conf=0.95, var.equal=FALSE, paired=FALSE)
t.test(summary_data$RT_mean_fa~summary_data$group, mu=0, alt="two.sided", conf=0.95, var.equal=FALSE, paired=FALSE)
t.test(summary_data$RT_sd_hit~summary_data$group, mu=0, alt="two.sided", conf=0.95, var.equal=FALSE, paired=FALSE)
t.test(summary_data$RT_sd_fa~summary_data$group, mu=0, alt="two.sided", conf=0.95, var.equal=FALSE, paired=FALSE)
raw_data %>%
group_by(part_nb,group,response_code) %>%
filter(response_code == "hit" | response_code == "fa") %>%
summarise(RT_mean = mean(RT,na.rm = TRUE)) %>%
ggplot(aes(x=group, y=RT_mean)) +
geom_boxplot() +
facet_wrap(~response_code) +
theme_classic()
raw_data %>%
group_by(part_nb,group,response_code) %>%
filter(response_code == "hit" | response_code == "fa") %>%
summarise(RT_sd = sd(RT,na.rm = TRUE)) %>%
ggplot(aes(x=group, y=RT_sd)) +
geom_boxplot() +
facet_wrap(~response_code) +
theme_classic()
summary_data %>%
filter(group==1) -> tmp_data
t.test(tmp_data$RT_mean_hit, tmp_data$RT_mean_fa, mu=0, alt="two.sided", conf=0.95, var.equal=FALSE, paired=TRUE)
t.test(tmp_data$RT_sd_hit, tmp_data$RT_sd_fa, mu=0, alt="two.sided", conf=0.95, var.equal=FALSE, paired=TRUE)
rm(tmp_data)
summary_data %>%
filter(group==2) -> tmp_data
t.test(tmp_data$RT_mean_hit, tmp_data$RT_mean_fa, mu=0, alt="two.sided", conf=0.95, var.equal=FALSE, paired=TRUE)
t.test(tmp_data$RT_sd_hit, tmp_data$RT_sd_fa, mu=0, alt="two.sided", conf=0.95, var.equal=FALSE, paired=TRUE)
rm(tmp_data)
View(summary_data)
View(summary_data)
DFA = [0.584
0.750
0.859
0.749
0.855
0.736
0.772
0.763
0.765
0.714
0.632
0.767
0.638
0.578
0.755
0.621
0.789
1.179
0.689
0.770
0.683
0.761
0.778
0.658
0.805
0.705
0.777
0.756
0.721
0.680
0.713
0.743
0.629
0.697
0.680
0.729
0.680
0.834
0.730
0.795
0.790
0.872
0.781
0.899
0.659
0.692
0.709
0.738
0.665
0.725
0.590
0.749]
DFA = 0.584
0.750
0.859
0.749
0.855
0.736
0.772
0.763
0.765
0.714
0.632
0.767
0.638
0.578
0.755
0.621
0.789
1.179
0.689
0.770
0.683
0.761
0.778
0.658
0.805
0.705
0.777
0.756
0.721
0.680
0.713
0.743
0.629
0.697
0.680
0.729
0.680
0.834
0.730
0.795
0.790
0.872
0.781
0.899
0.659
0.692
0.709
0.738
0.665
0.725
0.590
0.749
library(swirl)
ls()
rm(list=ls())
install_course("The R Programming Environment")
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files())
args(list.files)
old.dir <- wd
old.dir <- dir()
old.dir <- getwd()
dir.create(testdir)
testdir <- dir.create
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
mytest2.R <- file.rename("mytest.R")
file.rename("mytest.R") -> "mytest2.R"
?file.rename
file.rename("mytest.R", "mytest2.R")
?file.copy
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
?file.path
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd
wd()
setwd(old.dir)
rm
rm -ls
rm (list()=ls)
rm(list()=ls)
rm(list=ls()).
rm raw_data
rm(raw_data)
rm raw_data
?clearNames
rm(raw_data)
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
explore the structure and dimensions of the data
str(lrn14)
dim(lnr14)
str(lrn14)
dim(lrn14)
analysis_dataset$gender <- lrn14$gender
library(dplyr) # Access the dplyr library
# combine questions in the learning2014 data
deep <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
stra <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
surf <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
analysis_datase<- c("gender", "Age", "Attitude", "deep", "stra", "surf")
rm(analysis_datase)
analysis_dataset <- c("gender", "Age", "Attitude", "deep", "stra", "surf")
deep
rm(deep, stra, surf)
rm(analysis_dataset)
analysis_dataset <- c("gender", "Age", "Attitude")
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
stra_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
surf_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
deep_columns <- select(lrn14, one_of(deep_questions))
analysis_dataset$deep <- rowMeans(deep_columns)
deep_columns <- select(lrn14, one_of(deep_questions))
library(dplyr) # Access the dplyr library
install.packages("dplyr")
library(dplyr) # Access the dplyr library
deep_columns <- select(lrn14, one_of(deep_questions))
analysis_dataset$deep <- rowMeans(deep_columns)
analysis_dataset$deep
dim(analysis_dataset$deep)
strategic_columns <- select(lrn14, one_of(stra_questions))
analysis_dataset$stra <- rowMeans(strategic_columns)
surface_columns <- select(lrn14, one_of(surf_questions))
analysis_dataset$surf <- rowMeans(surface_columns)
analysis_dataset
?select
rm(list = ls())
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
cols <- c("gender", "Age", "Attitude","deep", "stra", "surf", "Points")
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
stra_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
surf_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
deep_columns <- select(lrn14, one_of(deep_questions))
lrn14$deep <- rowMeans(deep_columns)
strategic_columns <- select(lrn14, one_of(stra_questions))
lrn14$stra <- rowMeans(strategic_columns)
surface_columns <- select(lrn14, one_of(surf_questions))
lrn14$surf <- rowMeans(surface_columns)
learning2014 <- select(lrn14, one_of(cols))
learning2014 <- filter(learning2014, Points > 0)
str(learning2014)
?setwd
dir()
cd Documents
setwd("Users/jsimola/Documents/GitHub/IODS-project")
setwd("~/Documents/GitHub/IODS-project")
.dir
getwd()
?write.csv
write.csv(learning2014, file = "learning2014.csv", col.names = TRUE)
str(learning2014) # study the dimensions of learning2014: 166 obs, 7 vars
read.csv("learning2014.csv")
?read.table()
setwd("~/Documents/GitHub/IODS-project/data")
write.csv(learning2014, file = "learning2014.csv")
> rm(list = ls())
rm(list = ls())
rm(list = ls()) # clear workspace first
setwd("~/Documents/GitHub/IODS-project/data")
rm(list = ls()) # clear workspace first
read.table("~/Documents/GitHub/IODS-project/data/learning2014.txt")
rm(list = ls()) # clear workspace first
read.table("~/Documents/GitHub/IODS-project/data/learning2014.txt", sep = ",")
rm(list = ls()) # clear workspace first
read.table("~/Documents/GitHub/IODS-project/data/learning2014.txt", sep = ",")
read.csv("~/Documents/GitHub/IODS-project/learning2014.csv")
rm(list = ls()) # clear workspace first
learning2014 <- read.csv("~/Documents/GitHub/IODS-project/learning2014.csv")
str(learning2014)
dim(learning2014)
read.table("~/Documents/GitHub/IODS-project/data/learning2014.txt", sep = ",")
rm(list = ls())
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
library(dplyr) # Access the dplyr library
# columns for the analysis dataset
cols <- c("Gender", "Age", "Attitude","deep", "stra", "surf", "Points")
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
stra_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
surf_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
deep_columns <- select(lrn14, one_of(deep_questions))
lrn14$deep <- rowMeans(deep_columns)
strategic_columns <- select(lrn14, one_of(stra_questions))
lrn14$stra <- rowMeans(strategic_columns)
surface_columns <- select(lrn14, one_of(surf_questions))
lrn14$surf <- rowMeans(surface_columns)
learning2014 <- select(lrn14, one_of(cols))
cols <- c("gender", "Age", "Attitude","deep", "stra", "surf", "Points")
learning2014 <- select(lrn14, one_of(cols))
str(learning2014)
learning2014 <- filter(learning2014, Points > 0)
str(learning2014) # study the dimensions of learning2014: 166 obs, 7 vars
setwd("~/Documents/GitHub/IODS-project")
getwd()
write.csv(learning2014, file = "learning2014.csv")
read.csv("learning2014.csv")
?write.csv
write.csv(learning2014, file = "learning2014.csv", row.names = FALSE)
read.csv("learning2014.csv")
rm(list = ls()) # clear workspace first
learning2014 <- read.csv("~/Documents/GitHub/IODS-project/learning2014.csv") # my own data wrangling
# read.table("~/Documents/GitHub/IODS-project/data/learning2014.txt", sep = ",") # Kimmo's data
str(learning2014)
dim(learning2014)
